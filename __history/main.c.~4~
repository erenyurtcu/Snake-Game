#include <16F877A.h>
#fuses HS,NOWDT,NOPROTECT,NOLVP
#use delay(clock=16000000)
#include <stdlib.h>
#include <glcd.c>
#include <stdio.h>

#define uchar unsigned char

// Izgara parametreleri
#define GRID_SIZE     6
#define GRID_COLS     10
#define GRID_ROWS     10
#define GRID_ORIGIN_X 0
#define GRID_ORIGIN_Y 0

// Maksimum yýlan uzunluðu (daha fazla olursa hata olur!)
#define MAX_SNAKE_LEN (GRID_COLS*GRID_ROWS)

uchar SNAKE[MAX_SNAKE_LEN][2];
uchar dir = 2;
uchar food[2], LENGTH_SNAKE = 10;
uchar posX = 1, posY = 2; // Yýlanýn baþý
uchar score = 0;
char score_txt[11] = "Score: 00";
char gayover[14]= "GAME OVER !!!";
uchar i;

// Izgarayý çiz
void drawGrid() {
   for (uchar c = 0; c <= GRID_COLS; c++) {
      uchar x = GRID_ORIGIN_X + c * GRID_SIZE;
      glcd_line(x,
                GRID_ORIGIN_Y,
                x,
                GRID_ORIGIN_Y + GRID_ROWS*GRID_SIZE,
                1);
   }
   for (uchar r = 0; r <= GRID_ROWS; r++) {
      uchar y = GRID_ORIGIN_Y + r * GRID_SIZE;
      glcd_line(GRID_ORIGIN_X,
                y,
                GRID_ORIGIN_X + GRID_COLS*GRID_SIZE,
                y,
                1);
   }
}

// Hücre içini doldur/boþalt
void fillCell(uchar gx, uchar gy, int1 color) {
   uchar px = GRID_ORIGIN_X + gx * GRID_SIZE + 1;
   uchar py = GRID_ORIGIN_Y + gy * GRID_SIZE + 1;
   for (uchar dx = 0; dx < GRID_SIZE-1; dx++)
      for (uchar dy = 0; dy < GRID_SIZE-1; dy++)
         glcd_pixel(px + dx, py + dy, color);
}

// Kafa hücresini yönüne göre gözle çiz
void drawHeadCell(uchar gx, uchar gy, uchar dir) {
    fillCell(gx, gy, 1);
    uchar px = GRID_ORIGIN_X + gx * GRID_SIZE;
    uchar py = GRID_ORIGIN_Y + gy * GRID_SIZE;
    uchar eyeX = px + GRID_SIZE/2;
    uchar eyeY = py + GRID_SIZE/2;
    switch(dir) {
        case 0: eyeX = px + 1;             break; // Sol
        case 1: eyeY = py + 1;             break; // Yukarý
        case 2: eyeY = py + GRID_SIZE - 2; break; // Aþaðý
        case 3: eyeX = px + GRID_SIZE - 2; break; // Sað
    }
    glcd_pixel(eyeX, eyeY, 0);
}

// Skor alanýný temizleyen fonksiyon
void clearScoreArea() {
   uchar startX = 65;
   uchar startY = 0;
   uchar width = 60;
   uchar height = 10;
   uchar x, y;
   for (x = startX; x < startX + width; x++) {
      for (y = startY; y < startY + height; y++) {
         glcd_pixel(x, y, 0);
      }
   }
}

// Yemi yalnýzca yýlan olmayan boþ bir gridde üretir ve çizer
void criar_comida() {
   uchar valid = 0;
   while (!valid) {
      food[0] = rand() % GRID_COLS;
      food[1] = rand() % GRID_ROWS;
      valid = 1;
      for (uchar j = 0; j < LENGTH_SNAKE; j++) {
         if (SNAKE[j][0] == food[0] && SNAKE[j][1] == food[1]) {
            valid = 0;
            break;
         }
      }
   }
   fillCell(food[0], food[1], 1);
}

void gameover() {
   LENGTH_SNAKE = 10;
   posX = 1;
   posY = 2;
   score = 0;
   score_txt[7] = score_txt[8] = '0';
   dir = 2;
   glcd_fillScreen(0);
   drawGrid();
   glcd_text57(25, 60, gayover, 1, 1);
   delay_ms(1000);
}

void writeScore() {
   clearScoreArea();
   glcd_text57(65, 0, score_txt, 1, 1);
}

void main() {
   glcd_init(ON);
   glcd_fillScreen(0);
   drawGrid();
   delay_ms(500);

Start:
   glcd_fillScreen(0);
   drawGrid();
   writeScore();
   criar_comida();

   // Yýlaný baþtan çiz
   for (i = 0; i < LENGTH_SNAKE; i++) {
      SNAKE[i][0] = posX - (LENGTH_SNAKE - 1 - i);
      SNAKE[i][1] = posY;
      fillCell(SNAKE[i][0], SNAKE[i][1], 1);
   }

   while (TRUE) {
      // Kontroller
      if (input(PIN_C3) && dir != 0) dir = 3;
      if (input(PIN_C2) && dir != 1) dir = 2;
      if (input(PIN_C1) && dir != 2) dir = 1;
      if (input(PIN_C4) && dir != 3) dir = 0;
      if (input(PIN_C5)) { gameover(); goto Start; }

      // Hareket öncesi mevcut baþý bul
      uchar prevX = posX;
      uchar prevY = posY;

      // Yeni baþ pozisyonunu güncelle
      switch(dir) {
         case 0: if (posX == 0) { gameover(); goto Start; } else posX--; break;
         case 1: if (posY == 0) { gameover(); goto Start; } else posY--; break;
         case 2: if (posY == GRID_ROWS - 1) { gameover(); goto Start; } else posY++; break;
         case 3: if (posX == GRID_COLS - 1) { gameover(); goto Start; } else posX++; break;
      }

      // Yýlanýn gövdesini bir yana kaydýr (her zaman sona baþ ekle)
      uchar tailX = SNAKE[0][0], tailY = SNAKE[0][1];
      for (i = 0; i < LENGTH_SNAKE - 1; i++) {
         SNAKE[i][0] = SNAKE[i + 1][0];
         SNAKE[i][1] = SNAKE[i + 1][1];
      }
      SNAKE[LENGTH_SNAKE - 1][0] = posX;
      SNAKE[LENGTH_SNAKE - 1][1] = posY;

      // Kendi kendine çarpma kontrolü
      for (i = 0; i < LENGTH_SNAKE - 1; i++) {
         if (SNAKE[i][0] == posX && SNAKE[i][1] == posY) {
            gameover(); goto Start;
         }
      }

      // --- Sadece tail'i sil! Eðer yem yeniyorsa silme ---
      int eaten = (posX == food[0] && posY == food[1]);

      if (!eaten) {
         fillCell(tailX, tailY, 0);
      }

      // Gövdeyi çiz
      for (i = 0; i < LENGTH_SNAKE - 1; i++)
         fillCell(SNAKE[i][0], SNAKE[i][1], 1);

      // Kafayý özel çiz
      drawHeadCell(posX, posY, dir);

      // Yem yendi mi?
      if (eaten) {
         // --- Dizi taþmasýný önle ---
         if (LENGTH_SNAKE < MAX_SNAKE_LEN) {
            LENGTH_SNAKE++;
         }
         if (LENGTH_SNAKE >= MAX_SNAKE_LEN - 2) {
            gameover(); goto Start;
         }
         criar_comida();
         score++;
         score_txt[7] = '0' + (score / 10);
         score_txt[8] = '0' + (score % 10);
         writeScore();
      }

      delay_ms(5000 / LENGTH_SNAKE);
   }
}

