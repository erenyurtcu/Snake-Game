#include <16F877A.h> // microcontroller definition for PIC16F877A
#fuses HS,NOWDT,NOPROTECT,NOLVP // high speed oscillator, no reset, no code protection, no low-voltage programming
#use delay(clock=16000000) // sets clock frequency to 16 MHz
#include <stdlib.h> // standard library for random number functions (rand())
#include <glcd.c> // glcd driver for graphics operations

#include <stdio.h> // standard I/O for string formatting (sprintf)
#define uchar unsigned char // alias for unsigned char
#define GRID_SIZE       6  // size of each grid cell (6x6 pixels)
#define GRID_COLS      10  // number of columns in the grid
#define GRID_ROWS      10  // number of rows in the grid
#define GRID_ORIGIN_X   0  // x starting position of the grid
#define GRID_ORIGIN_Y   0  // y starting position of the grid
#define BUZZER_PIN   PIN_B3 // buzzer connected to pin RB3

/// buzzer part
void buzzer_beep(int duration_ms) { // makes the buzzer beep for given time in ms
    int cycles = duration_ms * 1000L / 2000; // calculates number of on/off cycles (each 2ms = one square wave cycle)
    for (int i = 0; i < cycles; i++) { // repeat for calculated number of cycles
        output_low(BUZZER_PIN);     // turn buzzer on (active-low)
        delay_us(1000);             // wait 1 ms (half cycle)
        output_high(BUZZER_PIN);    // turn buzzer off
        delay_us(1000);             // wait 1 ms (half cycle)
        // 1 ms on + 1 ms off = 2 ms full cycle --› creates ~500 Hz square wave
    }
    output_high(BUZZER_PIN); // ensure buzzer is off at the end
}

void short_beep() { // plays a short beep
    buzzer_beep(100); // beep for 100 ms
}

void error_beep() { // plays error beep pattern
    buzzer_beep(1000); // beep 1 sec
    delay_ms(200);     // short pause
    buzzer_beep(1000); // beep 1 sec
    delay_ms(200);     // short pause
    buzzer_beep(700);  // beep 0.7 sec
    delay_ms(200);     // short pause
}

void win_melody() { // plays win melody using buzzer
    int notes[] = {200, 100, 100, 400, 200, 150, 600, 300}; // note durations in ms
    int gaps[]  = {50, 50, 100, 150, 100, 100, 150, 0};     // pause durations after each note
    for (int i = 0; i < 8; i++) {
        buzzer_beep(notes[i]); // play note
        delay_ms(gaps[i]);     // wait between notes
    }
}

uchar snakeX[32]; // x positions of segments 0–31
uchar snakeY[32]; // y positions of segments 0–31
uchar snakeX2[32]; // x positions of segments 32–63
uchar snakeY2[32]; // y positions of segments 32–63

#define getX(i) ((i < 32) ? snakeX[i] : snakeX2[(i)-32]) // get x of segment i (uses snakeX for 0–31, snakeX2 for 32–63)
#define getY(i) ((i < 32) ? snakeY[i] : snakeY2[(i)-32]) // get y of segment i (splits into 2 arrays to support up to 64 segments)
#define setX(i,val) ((i < 32) ? (snakeX[i]=(val)) : (snakeX2[(i)-32]=(val))) // set x of segment i (split arrays avoid index overflow)
#define setY(i,val) ((i < 32) ? (snakeY[i]=(val)) : (snakeY2[(i)-32]=(val))) // set y of segment i (32+ segments handled by second array)

uchar dir = 2; // snake direction (0: left, 1: up, 2: down, 3: right)
uchar food[2], LENGTH_SNAKE = 5; // food[x, y] and snake length
uchar posX = 0, posY = 2; // current head position
uchar score = 0; // current score
uchar best_score = 0; // best score
char score_txt[11] = "Score: 00"; // score string for display
char best_score_txt[10] = "Best: 00"; // best score string
char gameover_msg[14] = "GAMEOVER !!!"; // game over text
char win_msg[] = "YOU WON!"; // win message
uchar i; // loop counter

int1 isFirstStart = 1; // flag for first game start
uchar difficulty_index = 0; // 0: easy, 1: medium, 2: hard

struct {
    unsigned delay_time : 2; // 2-bit speed setting
} gameSettings; // game settings struct

// glcd part
void fillCell(signed int gx, signed int gy, int1 color) { // fills a grid cell at (gx, gy) with given color
    if (gx < 0 || gx >= GRID_COLS || gy < 0 || gy >= GRID_ROWS) return; // skip if outside grid
    uchar px = GRID_ORIGIN_X + gx * GRID_SIZE + 1; // x pixel start position inside cell
    uchar py = GRID_ORIGIN_Y + gy * GRID_SIZE + 1; // y pixel start position inside cell
    for (uchar dx = 0; dx < GRID_SIZE - 1; dx++)       // loop through cell width
      for (uchar dy = 0; dy < GRID_SIZE - 1; dy++)     // loop through cell height
          glcd_pixel(px + dx, py + dy, color);         // draw each pixel inside cell
}

void screenWipeDown() { // fills screen line by line from top to bottom
    for (uchar y = 0; y < 64; y++) { // loop through rows (64 lines)
      for (uchar x = 0; x < 128; x++) { // loop through columns (128 pixels wide)
          glcd_pixel(x, y, 1); // turn on pixel at (x, y)
      }
      delay_ms(5); // delay for wipe animation effect
    }
}

void drawGrid() { // draws vertical and horizontal grid lines
    for (uchar c = 0; c <= GRID_COLS; c++) { // vertical lines
      uchar x = GRID_ORIGIN_X + c * GRID_SIZE; // x coordinate of line
      glcd_line(x, GRID_ORIGIN_Y, x, GRID_ORIGIN_Y + GRID_ROWS * GRID_SIZE, 1);
    }
    for (uchar r = 0; r <= GRID_ROWS; r++) { // horizontal lines
      uchar y = GRID_ORIGIN_Y + r * GRID_SIZE; // y coordinate of line
      glcd_line(GRID_ORIGIN_X, y, GRID_ORIGIN_X + GRID_COLS * GRID_SIZE, y, 1);
    }
}

void clearScoreArea() { // clears the area where score is shown
    for (uchar x = 65; x < 125; x++) {
      for (uchar y = 0; y < 20; y++) {
          glcd_pixel(x, y, 0); // turn off pixel at (x, y)
      }
    }
}

void writeScore() { // displays current and best score on screen
    clearScoreArea(); // clear old score
    glcd_text57(65, 0, score_txt, 1, 1); // draw current score
    glcd_text57(65, 10, best_score_txt, 1, 1); // draw best score
}

void generateFood() { // randomly places food at an empty cell
    uchar valid = 0;
    while (!valid) {
      food[0] = rand() % GRID_COLS; // random x
      food[1] = rand() % GRID_ROWS; // random y
      valid = 1; // assume valid
      for (uchar j = 0; j < LENGTH_SNAKE; j++) {
          if (getX(j) == food[0] && getY(j) == food[1]) { // check overlap
              valid = 0; // invalid if overlaps
              break;
          }
      }
    }
    fillCell(food[0], food[1], 1); // draw food on screen
}

void gameover() { // handles game over state
    error_beep(); // play error sound
    error_beep(); // play error sound
    LENGTH_SNAKE = 5; // reset length
    posX = 0; posY = 2; // reset head position
    score = 0; // reset score
    score_txt[7] = '0'; score_txt[8] = '0'; // reset score text
    dir = 2; // reset direction to down

    glcd_fillScreen(0); // clear screen
    glcd_text57(25, 30, gameover_msg, 1, 1); // show "game over" 5x7
    delay_ms(1500); // wait for display
    screenWipeDown(); // wipe animation
    glcd_fillScreen(0); // clear screen again
    drawGrid(); // redraw grid
}

void winScreen() { // handles win state when snake is full
    win_melody(); // play win sound
    win_melody(); // play win sound
    glcd_fillScreen(0); // clear screen
    glcd_text57(35, 35, win_msg, 1, 1); // show win message
    delay_ms(2500); // wait for display
    screenWipeDown(); // wipe animation
    glcd_fillScreen(0); // clear screen again
    drawGrid(); // redraw grid
    LENGTH_SNAKE = 5; posX = 0; posY = 2; // reset game state
    score = 0; score_txt[7] = '0'; score_txt[8] = '0';
    dir = 2;
}

void showSplashScreen() { // shows game title at start
    char serpenti_txt[] = "SERPENTI";
    char snakegame_txt[] = "SNAKE GAME";
    glcd_fillScreen(0); // clear screen
    glcd_text57(40, 22, serpenti_txt, 1, 1); // show title
    glcd_text57(34, 34, snakegame_txt, 1, 1); // show subtitle
    delay_ms(2000); // wait before starting
}

void displayDifficulty(uchar index) { // draws the difficulty text based on index
    char difficultyText[16]; // buffer for difficulty label

    for (uchar x = 0; x < 128; x++) { // clear horizontal range
      for (uchar y = 30; y < 43; y++) { // clear vertical range
          glcd_pixel(x, y, 0); // turn off pixel to erase previous text
      }
    }

    switch(index) { // set label by difficulty index
      case 0: strcpy(difficultyText, "< EASY >"); break; // easy mode
      case 1: strcpy(difficultyText, "< MEDIUM >"); break; // medium mode
      case 2: strcpy(difficultyText, "< HARD >"); break; // hard mode
    }

    int text_length = strlen(difficultyText); // count characters
    int pos_x = (128 - (text_length * 6)) / 2; // center text (6 px per char)

    glcd_text57(pos_x, 32, difficultyText, 1, 1); // draw difficulty at y=32 centered
}

void selectDifficulty() { // lets user choose game difficulty
    char title[] = "SELECT DIFFICULTY"; // title string
    glcd_fillScreen(0); // clear screen
    glcd_text57(13, 18, title, 1, 1); // draw title at top
    displayDifficulty(difficulty_index); // show initial difficulty

    int1 prev_left = 0, prev_right = 0, prev_select = 0; // previous button states

    while(TRUE) { // loop until selection is made
      int1 curr_left = input(PIN_C4); // read left button
      int1 curr_right = input(PIN_C3); // read right button
      int1 curr_select = input(PIN_C5); // read select button

      if (curr_right && !prev_right) { // detect right press
          if (difficulty_index < 2) { // max index is 2 (hard)
              difficulty_index++; // go to next difficulty
              displayDifficulty(difficulty_index); // update screen
              short_beep(); // confirm with beep
          }
      }

      if (curr_left && !prev_left) { // detect left press
          if (difficulty_index > 0) { // min index is 0 (easy)
              difficulty_index--; // go to previous difficulty
              displayDifficulty(difficulty_index); // update screen
              short_beep(); // confirm beep
          }
      }

      if (curr_select && !prev_select) { // detect selection press
          switch (difficulty_index) { // map index to speed
            case 0: gameSettings.delay_time = 3; break; // easy = slowest
            case 1: gameSettings.delay_time = 2; break; // medium = normal
            case 2: gameSettings.delay_time = 1; break; // hard = fastest
          }
          short_beep(); // confirm beep
          delay_ms(300); // wait before starting game
          return; // exit selection screen
      }

      prev_left = curr_left; // update previous states
      prev_right = curr_right;
      prev_select = curr_select;

      delay_ms(50); // debounce delay
    }
}

void main() { // entry point of the program
    output_high(BUZZER_PIN); // buzzer initially off (active-low)

    glcd_init(ON); // initialize glcd
    glcd_fillScreen(0); // clear glcd screen
    delay_ms(500); // wait for stabilization

Start: // label for game restart
    if (isFirstStart) { // only for first run
        showSplashScreen(); // show splash
        screenWipeDown(); // visual effect
        selectDifficulty(); // choose difficulty
        isFirstStart = 0; // disable intro on next runs
    }

    glcd_fillScreen(0); // clear screen
    drawGrid(); // draw game grid
    writeScore(); // show initial score
    generateFood(); // place first food

    for (i = 0; i < LENGTH_SNAKE; i++) { // init snake segments
        setX(i, posX - i); // x position from head to tail
        setY(i, posY); // y position constant
        fillCell(getX(i), getY(i), 1); // draw segment
    }

    while (TRUE) { // main game loop
        if (input(PIN_C3) && dir != 0) { dir = 3; short_beep(); } // right
        if (input(PIN_C2) && dir != 1) { dir = 2; short_beep(); } // down
        if (input(PIN_C1) && dir != 2) { dir = 1; short_beep(); } // up
        if (input(PIN_C4) && dir != 3) { dir = 0; short_beep(); } // left
        if (input(PIN_C5)) { gameover(); goto Start; } // reset button

        switch(dir) { // update head position
            case 0: if (posX == 0) { gameover(); goto Start; } else posX--; break;
            case 1: if (posY == 0) { gameover(); goto Start; } else posY--; break;
            case 2: if (posY == GRID_ROWS - 1) { gameover(); goto Start; } else posY++; break;
            case 3: if (posX == GRID_COLS - 1) { gameover(); goto Start; } else posX++; break;
        }

        uchar tailX = getX(0), tailY = getY(0); // store tail position
        for (i = 0; i < LENGTH_SNAKE - 1; i++) {
            setX(i, getX(i + 1)); // shift x
            setY(i, getY(i + 1)); // shift y
        }
        setX(LENGTH_SNAKE - 1, posX); // new head x
        setY(LENGTH_SNAKE - 1, posY); // new head y

        for (i = 0; i < LENGTH_SNAKE - 1; i++) { // check self-collision
            if (getX(i) == posX && getY(i) == posY) {
                gameover(); goto Start;
            }
        }

        fillCell(posX, posY, 1); // draw new head
        fillCell(tailX, tailY, 0); // clear old tail

        if (posX == food[0] && posY == food[1]) { // food eaten
            buzzer_beep(100); // eat sound
            // store old tail before growing
            uchar oldTailX = getX(0);
            uchar oldTailY = getY(0);
      
            if (LENGTH_SNAKE >= 64) {
                winScreen();
                goto Start;
            }

            LENGTH_SNAKE++; // grow snake
            // insert new segment at old tail position
            for (i = LENGTH_SNAKE - 1; i > 0; i--) {
                setX(i, getX(i - 1));
                setY(i, getY(i - 1));
            }
            setX(0, oldTailX);
            setY(0, oldTailY);
            fillCell(oldTailX, oldTailY, 1); // draw new segment immediately
            generateFood(); // new food
            score++; // update score
            score_txt[7] = '0' + (score / 10);
            score_txt[8] = '0' + (score % 10);
      
            if (score > best_score) {
                best_score = score;
                best_score_txt[7] = '0' + (best_score / 10);
                best_score_txt[8] = '0' + (best_score % 10);
            }
      
            writeScore(); // update display
        }
        delay_ms(gameSettings.delay_time * 300); // control speed
    }
}

