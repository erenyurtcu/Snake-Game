#include <16F877A.h>
#fuses HS,NOWDT,NOPROTECT,NOLVP
#use delay(clock=16000000)
#include <stdlib.h>
#include <glcd.c>
#include <stdio.h>

#define uchar unsigned char

// Izgara parametreleri
#define GRID_SIZE     6
#define GRID_COLS     10
#define GRID_ROWS     10
#define GRID_ORIGIN_X 0
#define GRID_ORIGIN_Y 0

uchar SNAKE[100][2];
uchar dir = 2;
uchar food[2], LENGTH_SNAKE = 3;
uchar posX = 1, posY = 2;
uchar score = 0;
uchar best_score = 0;
char score_txt[11] = "Score: 00";
char best_score_txt[10] = "Best: 00";
char gayover[14]= "GAMEOVER !!!";
uchar i;

int1 isFirstStart = 1; // Sadece ilk baþlatmada efekt için flag

// Akan ekran efekti – LED'leri ON yapar
void screenWipeDown() {
   for (uchar y = 0; y < 64; y++) {
      for (uchar x = 0; x < 128; x++) {
         glcd_pixel(x, y, 1);
      }
      delay_ms(5);
   }
}

// Izgarayý çiz
void drawGrid() {
   for (uchar c = 0; c <= GRID_COLS; c++) {
      uchar x = GRID_ORIGIN_X + c * GRID_SIZE;
      glcd_line(x, GRID_ORIGIN_Y, x, GRID_ORIGIN_Y + GRID_ROWS * GRID_SIZE, 1);
   }
   for (uchar r = 0; r <= GRID_ROWS; r++) {
      uchar y = GRID_ORIGIN_Y + r * GRID_SIZE;
      glcd_line(GRID_ORIGIN_X, y, GRID_ORIGIN_X + GRID_COLS * GRID_SIZE, y, 1);
   }
}

// Hücreyi doldur/boþalt
void fillCell(uchar gx, uchar gy, int1 color) {
   uchar px = GRID_ORIGIN_X + gx * GRID_SIZE + 1;
   uchar py = GRID_ORIGIN_Y + gy * GRID_SIZE + 1;
   for (uchar dx = 0; dx < GRID_SIZE - 1; dx++)
      for (uchar dy = 0; dy < GRID_SIZE - 1; dy++)
         glcd_pixel(px + dx, py + dy, color);
}

// Skor alanýný temizle
void clearScoreArea() {
   for (uchar x = 65; x < 125; x++) {
      for (uchar y = 0; y < 20; y++) {
         glcd_pixel(x, y, 0);
      }
   }
}

// Skoru yaz
void writeScore() {
   clearScoreArea();
   glcd_text57(65, 0, score_txt, 1, 1);
   glcd_text57(65, 10, best_score_txt, 1, 1);
}

// Yemi oluþtur
void criar_comida() {
   uchar valid = 0;
   while (!valid) {
      food[0] = rand() % GRID_COLS;
      food[1] = rand() % GRID_ROWS;
      valid = 1;
      for (uchar j = 0; j < LENGTH_SNAKE; j++) {
         if (SNAKE[j][0] == food[0] && SNAKE[j][1] == food[1]) {
            valid = 0;
            break;
         }
      }
   }
   fillCell(food[0], food[1], 1);
}

// Oyun sonu
void gameover() {
   LENGTH_SNAKE = 3;
   posX = 1;
   posY = 2;
   score = 0;
   score_txt[7] = score_txt[8] = '0';
   dir = 2;

   glcd_fillScreen(0);                       // Ekraný siyah yap
   glcd_text57(25, 30, gayover, 1, 1);       // GAMEOVER yaz
   delay_ms(1500);                           // Yazý biraz kalsýn

   screenWipeDown();                         // Siyah efekt (yukarýdan aþaðýya)
   glcd_fillScreen(0);                       // Ekraný temizle (tüm pikseller 0)
   drawGrid();                               // Yeni grid çiz
}

void main() {
   glcd_init(ON);
   glcd_fillScreen(0);   // Ýlk baþta ekran tamamen kapalý
   delay_ms(500);        // Grid çizilmeden bekleme

Start:
   if (isFirstStart) {
      screenWipeDown();   // Sadece ilk oyunda efekt
      isFirstStart = 0;
   }

   glcd_fillScreen(0);   // Temizle
   drawGrid();           // Grid çiz
   writeScore();         // Skor alaný çiz
   criar_comida();       // Yem yerleþtir

   for (i = 0; i < LENGTH_SNAKE; i++) {
      SNAKE[i][0] = posX - (LENGTH_SNAKE - 1 - i);
      SNAKE[i][1] = posY;
      fillCell(SNAKE[i][0], SNAKE[i][1], 1);
   }

   while (TRUE) {
      if (input(PIN_C3) && dir != 0) dir = 3;
      if (input(PIN_C2) && dir != 1) dir = 2;
      if (input(PIN_C1) && dir != 2) dir = 1;
      if (input(PIN_C4) && dir != 3) dir = 0;
      if (input(PIN_C5)) { gameover(); goto Start; }

      switch(dir) {
         case 0: if (posX == 0) { gameover(); goto Start; } else posX--; break;
         case 1: if (posY == 0) { gameover(); goto Start; } else posY--; break;
         case 2: if (posY == GRID_ROWS - 1) { gameover(); goto Start; } else posY++; break;
         case 3: if (posX == GRID_COLS - 1) { gameover(); goto Start; } else posX++; break;
      }

      uchar tailX = SNAKE[0][0], tailY = SNAKE[0][1];
      for (i = 0; i < LENGTH_SNAKE - 1; i++) {
         SNAKE[i][0] = SNAKE[i + 1][0];
         SNAKE[i][1] = SNAKE[i + 1][1];
      }
      SNAKE[LENGTH_SNAKE - 1][0] = posX;
      SNAKE[LENGTH_SNAKE - 1][1] = posY;

      for (i = 0; i < LENGTH_SNAKE - 1; i++) {
         if (SNAKE[i][0] == posX && SNAKE[i][1] == posY) {
            gameover(); goto Start;
         }
      }

      fillCell(posX, posY, 1);
      fillCell(tailX, tailY, 0);

      if (posX == food[0] && posY == food[1]) {
         LENGTH_SNAKE++;
         if (LENGTH_SNAKE >= GRID_COLS * GRID_ROWS - 2) {
            gameover(); goto Start;
         }
         criar_comida();
         score++;
         score_txt[7] = '0' + (score / 10);
         score_txt[8] = '0' + (score % 10);

         if (score > best_score) {
            best_score = score;
            best_score_txt[7] = '0' + (best_score / 10);
            best_score_txt[8] = '0' + (best_score % 10);
         }

         writeScore();
      }

      delay_ms(600);
   }
}

